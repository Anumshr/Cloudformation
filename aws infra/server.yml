Description: Creating LB, SG, ASG for the servers
Parameters: 
    Environment: 
        Description: Environment which will prefix the resources created
        Type: String
Resources:
    WebserverSG:
        Type: AWS::EC2::SecurityGroup
        Properties: 
          GroupDescription: Allow traffic to internet and ssh
          SecurityGroupEgress: 
            - CidrIp: 0.0.0.0/0
              FromPort: 0
              IpProtocol: tcp
              ToPort: 65535
          SecurityGroupIngress: 
            - CidrIp: 0.0.0.0/0
              FromPort: 8080
              IpProtocol: tcp
              ToPort: 8080
            - CidrIp: 0.0.0.0/0
              FromPort: 22
              IpProtocol: tcp
              ToPort: 22
          Tags: 
            - Key: Name
              Value: !Sub ${Environment}-SGwebserver
          VpcId: 
            Fn::ImportValue: !Sub ${Environment}-VPCID
    LoadBalancerSG:
        Type: AWS::EC2::SecurityGroup
        Properties: 
          GroupDescription: Allow traffic to internet 
          SecurityGroupEgress: 
            - CidrIp: 0.0.0.0/0
              FromPort: 80
              IpProtocol: tcp
              ToPort: 80
          SecurityGroupIngress: 
            - CidrIp: 0.0.0.0/0
              FromPort: 80
              IpProtocol: tcp
              ToPort: 80
          Tags: 
            - Key: Name
              Value: !Sub ${Environment}-LBSg
          VpcId: 
            Fn::ImportValue: !Sub ${Environment}-VPCID
    WebServerLaunchConfig:
          Type: AWS::AutoScaling::LaunchConfiguration
          Properties: 
            ImageId: ami-005bdb005fb00e791
            BlockDeviceMappings:
            - DeviceName: "/dev/sdk"
              Ebs:
                VolumeSize: '10'
            InstanceType: t2.micro
            KeyName: that-one
            LaunchConfigurationName: WebServerLaunchConfig
            SecurityGroups: 
              - !Ref WebserverSG
            UserData: 
              Fn::Base64: !Sub |
                #!/bin/bash
                # Install docker
                apt-get update
                apt-get install -y apt-transport-https ca-certificates curl software-properties-common
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                add-apt-repository \
                "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) \
                stable"
                apt-get update
                apt-get install -y docker-ce
                usermod -aG docker ubuntu
                docker run -p 8080:8080 tomcat:8.0
    WebAppASG:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
          AutoScalingGroupName: WebAppASG
          VPCZoneIdentifier: 
            - Fn::ImportValue: !Sub ${Environment}-PRI1-SN
            - Fn::ImportValue: !Sub ${Environment}-PRI2-SN
          LaunchConfigurationName:
            Ref: WebServerLaunchConfig
          MinSize: '3'
          MaxSize: '5'
          TargetGroupARNs:
          - Ref: WebAppTargetGroup
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub ${Environment}-PUB1-SN
          - Fn::ImportValue: !Sub ${Environment}-PUB2-SN
          SecurityGroups:
          - Ref: LoadBalancerSG
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLB
          Port: '80'
          Protocol: HTTP       
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 8080
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: ${Environment}-VPCID


